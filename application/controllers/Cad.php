<?phpclass Cad extends CI_Controller {    public function __construct() {        parent::__construct();        if (!$this->session->userdata('logged_in')) {            redirect('welcome');        }        $this->load->model('user_model');        $this->load->model('cad_model1');        $this->load->model('customer_model');        $this->load->library('email');        $this->load->library('upload');        $this->load->model('beamon_model');        $this->load->model('order_model');        $this->load->helper('date');        $this->load->library('ckeditor');        $this->load->library('ckfinder');        $this->ckeditor->basePath = base_url() . 'assets/ckeditor/';        $this->ckeditor->config['toolbar'] = array(            array('Source', '-', 'Bold', 'Italic', 'Underline', '-', 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo', '-', 'NumberedList', 'BulletedList')        );        $this->ckeditor->config['language'] = 'english';        $this->ckeditor->config['width'] = '730px';        $this->ckeditor->config['height'] = '300px';//Add Ckfinder to Ckeditor        $this->ckfinder->SetupCKEditor($this->ckeditor, '../../asset/ckfinder/');    }    public function index() {        $date = '2015-05-15';        $data['high'] = $this->cad_model1->get_cad_status('2', '1', $date);        $data['normal'] = $this->cad_model1->get_cad_status('1', '1', $date);        $data['low'] = $this->cad_model1->get_cad_status('0', '1', $date);        $this->template->build("cad/cad_orders", $data);    }    public function cad_new_job() {        header('Access-Control-Allow-Origin: *');        $data["order_id"] = $_GET['ord_id'];        $data["engg_id"] = $_GET['engg_id'];        $data['ord_ref_id'] = $_GET['ord_ref_id'];        $data["order_status"] = $this->cad_model1->get_order_status($data["order_id"]);        $data['user'] = $this->user_model->get_job_update_join($data["order_id"]);        $this->load->view('cad/cad_popup', $data);    }    public function cad_mail_to_customer() {        header('Access-Control-Allow-Origin: *');        if ($this->input->post()) {            $config['protocol'] = 'smtp';            $config['smtp_host'] = 'ssl://smtp.gmail.com';            $config['smtp_port'] = '25';            $config['smtp_port'] = '465';            $config['smtp_timeout'] = '7';            $config['smtp_user'] = 'sribabuixly@gmail.com';            $config['smtp_pass'] = '123456sri';            $config['charset'] = 'utf-8';            $config['newline'] = "\r\n";//            $config['mailtype'] = 'html'; // or html            $config['validation'] = TRUE; // bool whether to validate email or not                $config['mailtype'] = 'html';            $this->email->initialize($config);            $this->email->set_newline("\r\n");            $this->email->from('sribabuixly@gmail.com', 'sribabu');            $this->email->to($_POST["email"]);            $this->email->cc($_POST["cc_email"]);            $filnames = $_POST["file_names"];            $filenames = explode(",", $filnames);            if (!empty($filenames)) {                foreach ($filenames as $filename) {                    if (!empty($filename))                        $this->email->attach(base_url() . '/upload/' . $filename);                }            }            $message = $_POST["message"];            $message.=$this->load->view("cad/email_signature", array(), true);            $this->email->subject($_POST["subject"]);            $this->email->message($message);            $email_sent = $this->email->send();            if ($email_sent) {                $data['is_hold'] = WORK_IN_HOLD;                $data['ord_id'] = $_POST['ord_id'];                change_working_status('is_hold', WORK_IN_HOLD, $data['ord_id']);                working_status_updates(QUERY_SENT_TO_CUSTOMER, $_POST['subject'], $data['ord_id']);                echo json_encode(array("status" => true, "message" => "Email sent successfully"));            } else {                echo json_encode(array("status" => false, "message" => "Email not sent successfully"));            }        } else {            $data['ord_id'] = $_GET['ord_id'];            $data['order_reference_id'] = $_GET['order_reference_id'];            $customer_id = $_GET['engg_id']; //$this->uri->segment(3);            $data["customer"] = $this->customer_model->get_engineer_details($customer_id);            $this->load->view('cad/mail_to_customer', $data);        }    }    public function upload_attachment() {        $path = APPPATH . '../upload/' . $_POST["ord_reference_id"] . '/cad_mailed_docs';        (!is_dir($path)) ? mkdir($path) : "";        $config['upload_path'] = $path;        $config['allowed_types'] = 'gif|jpg|png|pdf|zip|rar';        $this->upload->initialize($config);        if (!$this->upload->do_upload('file_1')) {            $error = array('error' => $this->upload->display_errors());            echo json_encode(array("status" => "failure", "message" => "File upload error."));        } else {            $uploaded = $this->upload->data();            $data["attachment"] = $uploaded["file_name"];            echo json_encode(array("status" => "success", "savedfilename" => $uploaded["file_name"], "filename" => $_FILES["file_1"]["name"]));        }    }    public function send_to_laser() {        $data['ord_id'] = $_POST['ord_id'];        $data['cad_remarks'] = $_POST['update_remarks'];        change_working_status('cad_status', WORK_COMPLETED, $data['ord_id']);        change_working_status('cad_remarks', $data['cad_remarks'], $data['ord_id']);        working_status_updates(CAD_COMPLETED, $_POST['update_remarks'], $data['ord_id']);        echo json_encode(array("status" => true, "message" => "Cad Work Completed."));    }    public function checklist() {        $data['ord_id'] = $_POST['ord_id'];        $data['ord_sts_id'] = $_POST['ord_sts_id'];        $this->load->view('cad/checklist', $data);    }        public function fixit_checklist() {        $data = "";        $this->load->view('cad/fixit_checklist', $data);    }        public function template_checklist() {        $data = "";        $this->load->view('cad/template_checklist', $data);    }        public function stencil_checklist() {        $data = "";        $this->load->view('cad/stencil_checklist', $data);    }        public function spinplate_checklist() {        $data = "";        $this->load->view('cad/spinplate_checklist', $data);    }    //    public function rework_checklist() {//        $data = "";//        $this->load->view('cad/rework_checklist', $data);//    }    public function upload_to_archive() {        $ord_reference_id = $_POST["ord_reference_id"];        $data["order_status_id"] = $_POST["order_status_id"];        $file_exist = $this->cad_model1->uploaded_files_details($data["order_status_id"], $_POST['type_of_upload']);        $path = APPPATH . '../upload/' . $ord_reference_id;        (!is_dir($path)) ? mkdir($path) : "";        $config['upload_path'] = $path;        $config['allowed_types'] = 'gif|jpg|png|pdf|zip|rar';//  $config['file_name'] = date("YmdHis") . $_FILES["file"]["tmp_name"];        $this->upload->initialize($config);        if (!$this->upload->do_upload('file1')) {            $error = array('error' => $this->upload->display_errors());            echo json_encode(array("status" => "failure", "message" => "File not uploaded."));//$this->template->build('admin/add_user', $error);        } else {            $uploaded = $this->upload->data();            $data["file_name"] = $uploaded["file_name"];            $data["order_status_id"] = $_POST["order_status_id"];            $data['file_type'] = $_POST['type_of_upload'];            if (!empty($file_exist)) {                $this->cad_model1->update_archive($data);            } else {                $this->cad_model1->upload_archive($data);            }            echo json_encode(array("status" => "success", "message" => "File Uploaded successfully.", "savedfilename" => $uploaded["file_name"], "filename" => $_FILES["file1"]["name"]));        }    }    public function change_cad_status() {        $order['ord_id'] = $this->uri->segment(3);        $data["order_status"] = $this->cad_model1->get_order_status($order['ord_id']);        if ($data["order_status"]['cad_status'] == 0) {            $this->cad_model1->change_cad_working($data["order_status"]['id']);            $order['update_remarks'] = "Cad Work started by" . $this->session->userdata('user_name');            $order['update_status'] = 1;            $this->cad_model1->change_cad_working_history($order);            $encode = array("status" => true, "message" => "Cad Status Changed to Working.");        } elseif ($data["order_status"]['cad_status'] == 1 && $data["order_status"]['is_hold'] == 0) {            $encode = array("status" => false, "message" => "Cad status is already in working");        } elseif ($data["order_status"]['cad_status'] == 2) {            $encode = array("status" => false, "message" => "The Cad is already Completed");        } elseif ($data["order_status"]['is_hold'] == 0) {            $encode = array("status" => false, "message" => "Sorry ! The Cad design is in hold sent for clarification to the Client.");        }        echo json_encode($encode);    }    public function change_cad_working_status() {        $data['ord_id'] = $this->input->post('ord_id');        $order["order_status"] = $this->cad_model1->get_order_status($data['ord_id']);        $this->cad_model1->change_cad_working($order["order_status"]['id']);        $data['update_status'] = 4;        $data['update_remarks'] = "Cad Work restarted by" . $this->session->userdata('user_name');        $this->cad_model1->change_cad_working_history($data);        $encode = array("status" => true, "message" => "Cad Status Changed");        echo json_encode($encode);    }    public function mail_templates() {        if ($this->input->post()) {            $this->cad_model1->mail_templates($this->input->post());            redirect('cad/view_mail_templates');        }        $this->template->build('cad/mail_templates');    }    public function view_mail_templates() {        $data['templates'] = $this->cad_model1->get_templates();        $this->template->build('cad/view_mail_templates', $data);    }    public function edit_mail_templates() {        $id = $this->uri->segment(3);        if ($this->input->post()) {            $data['mail_id'] = $id;            $data = $this->input->post();            $this->cad_model1->edit_templates($data);            redirect('cad/view_mail_templates');        }        $data['templates'] = $this->cad_model1->get_templates($id);        $this->template->build('cad/edit_mail_templates', $data);    }    public function delete_mail_templates() {        $id = $this->uri->segment(3);        $data['templates'] = $this->cad_model1->delete_templates($id);        redirect('cad/view_mail_templates');    }    public function get_mail_subject() {        $data['eng_id'] = $_POST['eng_id'];        $data['mail_id'] = $_POST['mail_id'];        $data['ord_id'] = $_POST['ord_id'];        $data['customer'] = $this->customer_model->get_engineer_details($data['eng_id']);        $data['message'] = get_cad_mail_subject($data['mail_id']);        $data['order_details'] = $this->order_model->get_order_details($data['ord_id']);        $data['customer_name'] = $this->customer_model->get_customer_name($data['order_details']['cust_ref']);        $names = array(            "{{first_name}}" => $data['customer']['eng_fname'],            "{{customer_name}}" => $data['customer_name']['cust_name'],            "{{assembly_no}}" => $data['order_details']['dt_top_assembly'] . $data['order_details']['dt_bot_assembly'],            "{{fab_number}}" => $data['order_details']['dt_top_fab'] . $data['order_details']['dt_bot_fab'],            "{{ref#}}" => $data['order_details']['order_code']        );        $mail_sub = strtr($data['message'][0]['mail_subject'], $names);        $mail_body = strtr($data['message'][0]['mail_body'], $names);        echo json_encode(array(            "subject" => $mail_sub,            "message" => $mail_body        ));    }    public function compare_check_list() {        $order_id = $_POST["check_list_order_id"];        $order_status_id = $_POST["check_list_order_sts_id"];        $aperture_count = $_POST["cl_aperture_content"];        $frame_used = $_POST["cl_frame_used"];        $bot_ref = $_POST["bot_ref_des"];        $foil_thickness = $_POST["cl_foil_thik"];        $fiducial_qty = $_POST["cl_fiducial_qty"];        $fiducial_dcode = $_POST["cl_fiducial_dcode"];        $border_used = $_POST["cl_border_used"];        $error = array();//Check aperture        if (empty($aperture_count)) {            $error["cl_aperture_content_em"] = "Please Enter the Aperture value.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Aperture Count Entered Wrongly');        } elseif ($aperture_count < 10000) {            $error["cl_aperture_content_em"] = "Please Enter the Correct value.";        }        /**         * Check Frame used value for empty and compare with the order         */        if (empty($frame_used)) {            $error["cl_frame_used_em"] = "Please Enter the Frame value.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Frame Not Entered');        } else {            $result = $this->cad_model1->compare_frame_size($frame_used, $order_id);            if (!$result) {                $error["cl_frame_used_em"] = "Please Check the Frame value with the order.";                $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Frame Entered Wrongly'); //Log error of the User            }        }        /**         * Check BOT Ref Value and compare with order         */        if (empty($bot_ref)) {            $error["bot_ref_des_em"] = "Please Enter the BOT Value.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Frame Entered Wrongly'); //Log error of the User        }        /**         * Check Foil thickness and compare with order         */        $compartwith = array(            "top", "bot"        );        foreach ($foil_thickness as $key => $foil) {            if (empty($foil)) {                $error["cl_foil_thik_em"] = "Please Enter the Foil thickness Value.";                $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Frame Entered Wrongly');            } else {                $result = $this->cad_model1->compare_foil_thickness($foil, $order_id, $compartwith[$key]);                if (!$result) {                    $error["cl_foil_thik_em"] = "Please Check the Foil thickness with the order.";                    $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Foil thickness Entered Wrongly');                }            }        }        /**         * Check for Fiducial Quantity empty         */        foreach ($fiducial_qty as $key => $fiducial) {            if (empty($fiducial)) {                $error["cl_fiducial_qty_em"] = "Please Enter the Fiducial Quantity.";                $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Fiducial Quantity not Entered'); //Log error of the User            }        }        /**         * Check for Fiducial Dcode empty         */        foreach ($fiducial_dcode as $key => $fiducial) {            if (empty($fiducial)) {                $error["cl_fiducial_dcode_em"] = "Please Enter the Fiducial Dcode Value.";                $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Fiducial Dcode not Entered');            }        }        /**         * Check for Border Used empty         */        if (empty($border_used)) {            $error["cl_border_used_em"] = "Please Enter the Border Used.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Fiducial Quantity not Entered');        } //else {//            $result = $this->cad_model1->compare_border_used($border_used, $order_id);//            if (!$result) {//                $error["cl_border_used_em"] = "Please Check the Border with the order.";////Log error of the User////                $this->checklist_error_log($order_id,"Frame Error", $frame_used);//            }//        }        $result = $this->cad_model1->compare_order_datas($order_id, "lead_free_mark", isset($_POST["lead_free_mark"]) ? 1 : 0 );        if (empty($result)) {            $error["lead_free_mark_em"] = "Please Check the Lead Free with the order.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Lead Free Entered Wrongly');        }//        $result = $this->cad_model1->compare_order_datas($order_id, "ship_tooling", isset($_POST["ship_tooling"]) ? 1 : 0 );//        if (empty($result)) {//            $error["ship_tooling_em"] = "Please Check the Ship Tooling with the order.";//        }        $result = $this->cad_model1->compare_order_datas($order_id, "fg_material", isset($_POST["fg_material"]) ? 1 : 0 );        if (empty($result)) {            $error["fg_material_em"] = "Please Check the Datum FG with the order.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Datum FG Entered Wrongly');        }        $result = $this->cad_model1->compare_order_datas($order_id, "film_plots", isset($_POST["film_plots"]) ? 1 : 0 );        if (empty($result)) {            $error["film_plots_em"] = "Please Check the Ship W/ Plots with the order.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Ship W/ Plots Entered Wrongly');        }        $result = $this->cad_model1->compare_order_datas($order_id, "inspect_template", isset($_POST["inspect_template"]) ? 1 : 0 );        if (empty($result)) {            $error["inspect_template_em"] = "Please Check the Ship W / Template with the order.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Ship W / Template Entered Wrongly');        }        $result = $this->cad_model1->compare_order_datas($order_id, "epo_coat", isset($_POST["electropolish"]) ? 1 : 0 );        if (empty($result)) {            $error["electropolish_em"] = "Please Check the Epo Coat with the order.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Epo Coat Entered Wrongly');        }        $result = $this->cad_model1->compare_order_datas($order_id, "epo_coat", isset($_POST["nano_coat"]) ? 1 : 0 );        if (empty($result)) {            $error["nano_coat_em"] = "Please Check the Coat with the order.";            $this->checklist_error_log($order_id, CAD_CHECKLIST_ERROR_LOGS, 'Nano Coat Entered Wrongly');        }        if (!isset($_POST['cust_instr'])) {            $error["cust_instr_em"] = "Please review customer instructions.";        } else {            $success["cust_instr_em"] = "";        }        if (!isset($_POST['check_drawing'])) {            $error["check_drawing_em"] = "Please check all the files.";        } else {            $success["check_drawing_em"] = "";        }        if (!isset($_POST['silkscr_check'])) {            $error["silkscr_check_em"] = "Please check all the screens.";        } else {            $success["silkscr_check_em"] = "";        }        if (!isset($_POST['spl_instr'])) {            $error["spl_instr_em"] = "Please verify special instructions.";        } else {            $success["spl_instr_em"] = "";        }//Save Data        if (empty($error)) {            $url_value = $this->uri->segment(3);            if (!empty($url_value)) {                $data['order_status_id'] = $_POST["check_list_order_sts_id"];                $data['aperture_count'] = $_POST["cl_aperture_content"];                $data['frame_used'] = $_POST["cl_frame_used"];                $data['lead_free'] = $_POST["lead_free_mark"];                $data['electropolish'] = $_POST["epo_coat"];                $data['ship_tooling'] = $_POST["ship_tooling"];                $data['ship_plot'] = $_POST["film_plots"];                $data['datum_fg'] = $_POST["fg_material"];                $data['border_used'] = $_POST["cl_border_used"];                $data['ship_template'] = $_POST["inspect_template"];                $data['premium'] = $_POST["premium"];                $data['s_r_sample'] = $_POST["s_sample"];                $data['scaling'] = $_POST["scaling"];                $data['cp_1'] = $_POST["cust_instr"];                $data['cp_2'] = $_POST["check_drawing"];                $data['cp_3'] = $_POST["silkscr_check"];                $data['cp_4'] = $_POST["spl_instr"];                $data['notes'] = $_POST["notes"];                $data['user_id'] = $this->session->userdata('user_id');                $dcode['cad_checklist_id'] = $this->cad_model1->checklist_data($data);                foreach ($fiducial_qty as $key => $fiducial) {                    $fiducial_save_array = array(                        "cad_checklist_id" => $dcode['cad_checklist_id'],                        "fiducial_quantity" => $fiducial                    );                    $this->cad_model1->fiducial_qty($fiducial_save_array);                }                foreach ($fiducial_dcode as $key => $fiducial) {                    $fiducial_save_array = array(                        "cad_checklist_id" => $dcode['cad_checklist_id'],                        "fiducial_dcode" => $fiducial                    );                    $this->cad_model1->fiducial_dcode($fiducial_save_array);                }                foreach ($foil_thickness as $key => $foil) {                    $foil_thickness_save = array(                        "cad_checklist_id" => $dcode['cad_checklist_id'],                        "thickness" => $foil                    );                    $this->cad_model1->foil_thickness($dcode, $foil);                }                $cad['cad_checklist_completed'] = 1;                $cad['cad_remarks'] = $data['notes'];                $cad['id'] = $_POST["check_list_order_sts_id"];                $cad['ord_id'] = $data['ord_id'];                $this->cad_model1->notes_to_laser($cad);            }            $success["status"] = "true";            $success["message"] = "Checklist values matched the Order.";            echo json_encode($success);        } else {            $error["status"] = "false";            echo json_encode($error);        }        exit;    }    protected function checklist_error_log($ord_id, $update_status, $update_remarks) {        $data['ord_id'] = $ord_id;        $data['update_status'] = $update_status;        $data['update_remarks'] = $update_remarks;        $this->cad_model1->error_log($data);    }    public function compare_check_multi_list() {        $result = $this->cad_model1->compare_order_datas($_POST["order_id"], $_POST["to_check"], ($_POST["value"] == 'true') ? 1 : 0 );        if (empty($result)) {            $error[$_POST["to_check"] . "_em"] = "Please Check the " . $_POST["label_disp"] . " with the order.";            echo json_encode($error);        } else {            $success[$_POST["to_check"] . "_em"] = "";            echo json_encode($success);        }        exit;    }    public function get_borders() {        $results = $this->cad_model1->get_borders($_POST["value"]);        echo '<option>Select Border</option>';        if (!empty($results)) {            foreach ($results as $result) {                echo '<option value="' . $result["border_id"] . '">' . $result["border_size"] . '</option>';            }        }        exit;    }}